sum(is.na(Mroz$inc))
fit1 = etreg(lwg~age+wc+k618+k5+lfp,wc~hc+age,data=Mroz, na.action = "omit")
fit1 = etreg(lwg~age+wc+k618+k5+lfp,wc~hc+age,data=Mroz)
fit1 = etreg(inc~age+wc+k618+k5+lfp,wc~hc+age,data=Mroz)
fit1 = etreg(inc~age+wc+k618+k5+lfp,wc~hc,data=Mroz)
fit1 = etreg(inc~age+wc+k618+k5+lfp,wc~hc+age,data=Mroz)
fit1 = etreg(inc~wc+k618+k5+lfp,wc~hc+age,data=Mroz)
fit1 = lm(inc~wc+k618+k5+lfpdata=Mroz)
fit1 = lm(inc~wc+k618+k5+lfp,data=Mroz)
summary(fit1)
fit1 = etreg(inc~wc+k618+k5+lfp,data=Mroz)
fit1 = etreg(inc~wc+k618+k5+lfp,wc~hc+age,data=Mroz)
fit1 = etreg(inc~wc+k618+k5+lfp,wc~hc+age+k5,data=Mroz)
fit1 = etreg(inc~wc+k618+k5+lfp,lfp~hc+age+k5,data=Mroz)
fit1 = etreg(inc~wc+k618+k5+lfp,lfp~hc,data=Mroz)
fit1 = etreg(inc~wc+k618+k5,lfp~hc,data=Mroz)
fit1 = etreg(inc~wc+k618+k5,lfp~1,data=Mroz)
Mroz$lfp
fit1 = etreg(inc~wc+k618+k5+lfp,lfp~1,data=Mroz)
library(rio)
datos = import("http://www.stata-press.com/data/r13/union3.dta")
datos$union
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
data=datos)
summary(fit1)
library(RegUtils)
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
data=datos)
summary(fit1)
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
data=datos)
.loglik = function(params, y, tt, x, w) {
p = ncol(x)
k = ncol(w)
betas = params[1:p]
gamas = params[(p+2):(p+k+1)]
delta = params[p+1]
rho = tanh(params[p+k+2])
sigma.sq = exp(2*params[p+k+3])
#Classify observations
obst1 = tt==1
obst0 = !obst1
ll <- rep(NA, length(y))
A = (y[obst1] - x[obst1,] %*% betas - delta)/sqrt(sigma.sq)
ll[obst1] <-
pnorm((w[obst1,] %*% gamas + A * rho)/sqrt(1 - rho^2), log.p = TRUE) -
0.5*A^2 - log(sqrt(2*pi*sigma.sq))
B = (y[obst0] - x[obst0,] %*% betas)/sqrt(sigma.sq)
ll[obst0] <-
pnorm((-w[obst0,] %*% gamas - B * rho)/sqrt(1 - rho^2), log.p = TRUE) -
0.5*B^2 - log(sqrt(2*pi*sigma.sq))
return (ll)
}
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
)
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
data=datos)
#Las funciones se basan en el paquete censReg
etreg <- function(formula, treat, data, subset, na.action,
contrasts = NULL, model = TRUE, y = TRUE, x = FALSE, method = "NR", ...)
{
ret.x <- x
ret.y <- y
## set up model.frame() call
cl <- match.call()
if(missing(data)) data <- environment(formula)
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "na.action"), names(mf), 0)
mf <- mf[c(1, m)]
mf$drop.unused.levels <- TRUE
## call model.frame()
c.formula = as.Formula(formula, treat)
#Check correct formulas
stopifnot(length(c.formula) == c(2L,2L))
mf$formula <- c.formula
mf[[1]] <- as.name("model.frame")
mf <- eval(mf, parent.frame())
## extract response, terms, model matrices
y <- as.matrix(model.part(c.formula, data = mf, lhs=1))
t <- as.matrix(model.part(c.formula, data = mf, lhs=2))
mt <- terms(c.formula, data = data)
mtX <- terms(c.formula, data = data, lhs=0,rhs = 1)
x <- model.matrix(mtX, mf, contrasts)
mtW <- terms(c.formula, data = data, lhs=0,rhs = 2)
w <- model.matrix(mtW, mf, contrasts)
##Compute start values:
fit1 = lm(t~w-1)
z = cbind(x,fit1$fitted.values)
fit2 = lm(y~z-1)
fit2s = summary(fit2)
rhos = cov(fit2$residuals, fit1$residuals)/fit2s$sigma
lnsigma = if (fit2s$sigma > 0) log(fit2s$sigma) else 1
start = c(fit2$coefficients, fit1$coefficients, atanh(rhos),lnsigma)
names(start) = c(colnames(x), colnames(t), colnames(w), "athRho", "lnsigma")
## call default interface
rval <- etreg.fit(y, t, x, w, start, method, ...)
# save and return the call
rval$call <- cl
# return the model terms
rval$terms <- mt
# return the degrees of freedom of the residuals
rval$df.residual <- unname(rval$nObs[1] - length(coef(rval)))
# return starting values
rval$start <- start
rval$xlevels <- .getXlevels(mt, mf)
rval$contrasts <- attr(x, "contrasts")
if (model)
rval$model <- mf
if (ret.x)
rval$x <- x
if (ret.y)
rval$y <- y
class(rval) <- c("etreg", class(rval))
return (rval)
}
etreg.fit <- function(y, t, x, w, start, method, ...)
{
## model dimensions
n <- NROW(y)
p <- ncol(x)
## sanity checks
stopifnot(n == nrow(x))
if(!is.null(w)) stopifnot(n == nrow(w))
## main regression
rval = maxLik(.loglik, start=start, method=method, y = y, tt=t, x= x,
w = w)
## Save NObs
rval$nObs = n
return(rval)
}
.loglik = function(params, y, tt, x, w) {
p = ncol(x)
k = ncol(w)
betas = params[1:p]
gamas = params[(p+2):(p+k+1)]
delta = params[p+1]
rho = tanh(params[p+k+2])
sigma.sq = exp(2*params[p+k+3])
#Classify observations
obst1 = tt==1
obst0 = !obst1
ll <- rep(NA, length(y))
A = (y[obst1] - x[obst1,] %*% betas - delta)/sqrt(sigma.sq)
ll[obst1] <-
pnorm((w[obst1,] %*% gamas + A * rho)/sqrt(1 - rho^2), log.p = TRUE) -
0.5*A^2 - log(sqrt(2*pi*sigma.sq))
B = (y[obst0] - x[obst0,] %*% betas)/sqrt(sigma.sq)
ll[obst0] <-
pnorm((-w[obst0,] %*% gamas - B * rho)/sqrt(1 - rho^2), log.p = TRUE) -
0.5*B^2 - log(sqrt(2*pi*sigma.sq))
return (ll)
}
activePar.default <- function(x, ...) {
if( !is.null( x$fixed ) ) {
result <- !x$fixed
} else {
result <- x$activePar
}
if( is.null( result ) ) {
result <- rep( TRUE, length( coef( x ) ) )
}
return( result )
}
summary.etreg <- function(object, robust=FALSE, eigentol=1e-12,... ) {
if(!inherits(object, "etreg"))
stop("'summary.etreg' called on a non-'etreg' object")
result <- NextMethod(summary, object)
if (robust) {
nParam <- length(object$estimate)
activePar <- activePar(object)
if((object$code < 100) & !is.null(object$estimate)) {
# in case of infinity at initial values, the coefs are not provided
if(!is.null(vc <- sandwich(object,...))) {
s <- sqrt(diag(vc))
names(s) <- names(object$estimate)
} else {s=NULL}
t <- object$estimate/s
p <- 2*pnorm( -abs( t))
t[!activePar(object)] <- NA
p[!activePar(object)] <- NA
results <- cbind("Estimate"=object$estimate,
"Std. error"=s,
"t value"=t, "Pr(> t)"=p)
result$estimate = results
}
} else {
vc = vcov(object)
}
### Delta method para Rho, sigma and lambda
object$rho = deltaMethod(object, "tanh(athRho)", vcov. = vc)
object$sigma = deltaMethod(object, "exp(lnsigma)", vcov. = vc)
object$lambda = deltaMethod(object, "tanh(athRho)*exp(lnsigma)", vcov.=vc)
v = rbind(object$rho,object$sigma,object$lambda)
t = unname(unlist(c(object$rho[1]/object$rho[2],
object$sigma[1]/object$sigma[2],
object$lambda[1]/object$lambda[2])))
pv = 2*pnorm( -abs(t))
estim = cbind(v,t,pv)
row.names(estim) = c("rho", "sigma","lambda")
colnames(estim) = c("Estimate", "Std. error", "t value", "Pr(> t)")
result$estimate = rbind(result$estimate,
estim)
class(result) <- c( "summary.etreg", class( result ) )
result$call <- object$call
result$nObs <- object$nObs
return(result)
}
print.summary.etreg <- function( x, logSigma = TRUE, digits = 4, ... ) {
cat( "\n" )
cat( "Call:\n" )
cat( paste( deparse( x$call ), sep = "\n", collapse = "\n" ) )
cat( "\n\n" )
cat( "Observations:\n" )
print( x$nObs )
cat( "\n" )
cat( "Coefficients:\n" )
printCoefmat( coef( x, logSigma = logSigma ), digits = digits )
cat( "\n" )
cat( maximType( x ), ", ", nIter( x ), " iterations\n", sep = "" )
cat( "Return code ", returnCode( x ), ": ", returnMessage( x ),
"\n", sep = "" )
cat( "Log-likelihood:", x$loglik, "on", sum( activePar( x ) ), "Df\n" )
cat( "\n" )
invisible( x )
}
print.etreg <- function( x, logSigma = TRUE, digits = 4, ... ) {
rho = unname(tanh(coef(x)["athRho"]))
sigma = unname(exp(coef(x)["lnsigma"]))
lambda = rho*sigma
cat( "\n" )
cat( "Call:\n" )
cat( paste( deparse( x$call ), sep = "\n", collapse = "\n" ) )
cat( "\n\n" )
cat( "Coefficients:\n" )
print( coef( x, logSigma = logSigma ), digits = digits )
print(list(rho = rho, sigma = sigma,
lambda = lambda))
cat( "\n" )
invisible( x )
}
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
data=datos)
library(Formula)
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
data=datos)
library(maxLik)
fit1 = etreg(wage~age+grade+smsa+black+tenure,union~south+black+tenure,
data=datos)
)
summary(fit1)
fit1 = etreg(inc~age+wc+k618+k5+lfp,wc~hc+age,data=Mroz)
#Las funciones se basan en el paquete censReg
etreg <- function(formula, treat, data, subset, na.action,
contrasts = NULL, model = TRUE, y = TRUE, x = FALSE, method = "NR", ...)
{
ret.x <- x
ret.y <- y
## set up model.frame() call
cl <- match.call()
if(missing(data)) data <- environment(formula)
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "na.action"), names(mf), 0)
mf <- mf[c(1, m)]
mf$drop.unused.levels <- TRUE
## call model.frame()
c.formula = as.Formula(formula, treat)
#Check correct formulas
stopifnot(length(c.formula) == c(2L,2L))
mf$formula <- c.formula
mf[[1]] <- as.name("model.frame")
mf <- eval(mf, parent.frame())
## extract response, terms, model matrices
y <- as.matrix(model.part(c.formula, data = mf, lhs=1))
t <- as.matrix(model.part(c.formula, data = mf, lhs=2))
mt <- terms(c.formula, data = data)
mtX <- terms(c.formula, data = data, lhs=0,rhs = 1)
x <- model.matrix(mtX, mf, contrasts)
mtW <- terms(c.formula, data = data, lhs=0,rhs = 2)
w <- model.matrix(mtW, mf, contrasts)
##Compute start values:
print (t)
fit1 = lm(t~w-1)
z = cbind(x,fit1$fitted.values)
fit2 = lm(y~z-1)
fit2s = summary(fit2)
rhos = cov(fit2$residuals, fit1$residuals)/fit2s$sigma
lnsigma = if (fit2s$sigma > 0) log(fit2s$sigma) else 1
start = c(fit2$coefficients, fit1$coefficients, atanh(rhos),lnsigma)
names(start) = c(colnames(x), colnames(t), colnames(w), "athRho", "lnsigma")
## call default interface
rval <- etreg.fit(y, t, x, w, start, method, ...)
# save and return the call
rval$call <- cl
# return the model terms
rval$terms <- mt
# return the degrees of freedom of the residuals
rval$df.residual <- unname(rval$nObs[1] - length(coef(rval)))
# return starting values
rval$start <- start
rval$xlevels <- .getXlevels(mt, mf)
rval$contrasts <- attr(x, "contrasts")
if (model)
rval$model <- mf
if (ret.x)
rval$x <- x
if (ret.y)
rval$y <- y
class(rval) <- c("etreg", class(rval))
return (rval)
}
etreg.fit <- function(y, t, x, w, start, method, ...)
{
## model dimensions
n <- NROW(y)
p <- ncol(x)
## sanity checks
stopifnot(n == nrow(x))
if(!is.null(w)) stopifnot(n == nrow(w))
## main regression
rval = maxLik(.loglik, start=start, method=method, y = y, tt=t, x= x,
w = w)
## Save NObs
rval$nObs = n
return(rval)
}
.loglik = function(params, y, tt, x, w) {
p = ncol(x)
k = ncol(w)
betas = params[1:p]
gamas = params[(p+2):(p+k+1)]
delta = params[p+1]
rho = tanh(params[p+k+2])
sigma.sq = exp(2*params[p+k+3])
#Classify observations
obst1 = tt==1
obst0 = !obst1
ll <- rep(NA, length(y))
A = (y[obst1] - x[obst1,] %*% betas - delta)/sqrt(sigma.sq)
ll[obst1] <-
pnorm((w[obst1,] %*% gamas + A * rho)/sqrt(1 - rho^2), log.p = TRUE) -
0.5*A^2 - log(sqrt(2*pi*sigma.sq))
B = (y[obst0] - x[obst0,] %*% betas)/sqrt(sigma.sq)
ll[obst0] <-
pnorm((-w[obst0,] %*% gamas - B * rho)/sqrt(1 - rho^2), log.p = TRUE) -
0.5*B^2 - log(sqrt(2*pi*sigma.sq))
return (ll)
}
activePar.default <- function(x, ...) {
if( !is.null( x$fixed ) ) {
result <- !x$fixed
} else {
result <- x$activePar
}
if( is.null( result ) ) {
result <- rep( TRUE, length( coef( x ) ) )
}
return( result )
}
summary.etreg <- function(object, robust=FALSE, eigentol=1e-12,... ) {
if(!inherits(object, "etreg"))
stop("'summary.etreg' called on a non-'etreg' object")
result <- NextMethod(summary, object)
if (robust) {
nParam <- length(object$estimate)
activePar <- activePar(object)
if((object$code < 100) & !is.null(object$estimate)) {
# in case of infinity at initial values, the coefs are not provided
if(!is.null(vc <- sandwich(object,...))) {
s <- sqrt(diag(vc))
names(s) <- names(object$estimate)
} else {s=NULL}
t <- object$estimate/s
p <- 2*pnorm( -abs( t))
t[!activePar(object)] <- NA
p[!activePar(object)] <- NA
results <- cbind("Estimate"=object$estimate,
"Std. error"=s,
"t value"=t, "Pr(> t)"=p)
result$estimate = results
}
} else {
vc = vcov(object)
}
### Delta method para Rho, sigma and lambda
object$rho = deltaMethod(object, "tanh(athRho)", vcov. = vc)
object$sigma = deltaMethod(object, "exp(lnsigma)", vcov. = vc)
object$lambda = deltaMethod(object, "tanh(athRho)*exp(lnsigma)", vcov.=vc)
v = rbind(object$rho,object$sigma,object$lambda)
t = unname(unlist(c(object$rho[1]/object$rho[2],
object$sigma[1]/object$sigma[2],
object$lambda[1]/object$lambda[2])))
pv = 2*pnorm( -abs(t))
estim = cbind(v,t,pv)
row.names(estim) = c("rho", "sigma","lambda")
colnames(estim) = c("Estimate", "Std. error", "t value", "Pr(> t)")
result$estimate = rbind(result$estimate,
estim)
class(result) <- c( "summary.etreg", class( result ) )
result$call <- object$call
result$nObs <- object$nObs
return(result)
}
print.summary.etreg <- function( x, logSigma = TRUE, digits = 4, ... ) {
cat( "\n" )
cat( "Call:\n" )
cat( paste( deparse( x$call ), sep = "\n", collapse = "\n" ) )
cat( "\n\n" )
cat( "Observations:\n" )
print( x$nObs )
cat( "\n" )
cat( "Coefficients:\n" )
printCoefmat( coef( x, logSigma = logSigma ), digits = digits )
cat( "\n" )
cat( maximType( x ), ", ", nIter( x ), " iterations\n", sep = "" )
cat( "Return code ", returnCode( x ), ": ", returnMessage( x ),
"\n", sep = "" )
cat( "Log-likelihood:", x$loglik, "on", sum( activePar( x ) ), "Df\n" )
cat( "\n" )
invisible( x )
}
print.etreg <- function( x, logSigma = TRUE, digits = 4, ... ) {
rho = unname(tanh(coef(x)["athRho"]))
sigma = unname(exp(coef(x)["lnsigma"]))
lambda = rho*sigma
cat( "\n" )
cat( "Call:\n" )
cat( paste( deparse( x$call ), sep = "\n", collapse = "\n" ) )
cat( "\n\n" )
cat( "Coefficients:\n" )
print( coef( x, logSigma = logSigma ), digits = digits )
print(list(rho = rho, sigma = sigma,
lambda = lambda))
cat( "\n" )
invisible( x )
}
fit1 = etreg(inc~age+wc+k618+k5+lfp,wc~hc+age,data=Mroz)
level(Mroz$wc)
levels(Mroz$wc)
levels(Mroz$wc)[1]
levels(datos$union)[1]
levels(datos$union)
datos$union
typeof(datos$union)
as.integer(Mroz$wc)
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
t = as.integer(t)
summary(fit1)
data(Mroz, package="car")
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
library(RegUtils)
data(Mroz, package="car")
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
library(RegUtils)
data(Mroz, package="car")
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
library(Formula)
data(Mroz, package="car")
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
library(RegUtils)
library(RegUtils)
library(RegUtils)
data(Mroz, package="car")
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
library(RegUtils)
data(Mroz, package="car")
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
.loglik
library(RegUtils)
data(Mroz, package="car")
Mroz$wcb = as.integer(Mroz$wc)
fit1 = etreg(inc~age+wcb+k618+k5+lfp,wcb~hc+age,data=Mroz)
summary(fit1)
help(lm)
View(cars)
fit1 = eivlm(dist~speed, data=datos, rel = c(0.85))
fit1 = eivlm(dist~speed, data=cars, rel = c(0.85))
summary(fit1)
car::printHypothesis
help(car::printHypothesis)
help(printHypothesis)
mod.davis <- lm(weight ~ repwt, data=Davis)
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
library(car)
mod.davis <- lm(weight ~ repwt, data=Davis)
## the following are equivalent:
linearHypothesis(mod.davis, diag(2), c(0,1))
car::printHypothesis
library(RegUtils)
library(rio)
datos = import("http://www.stata-press.com/data/r13/nhanes2.dta")
library(RegUtils)
fit1 = boxcox.r(bpdiast~bmi+tcresult+age+sex, data=datos, noTrans=c("age","sex"))
summary(fit1)
fit1
vcov(fit1)
fitted(fit1)
help(arima)
library(fBasics)
help(selection)
selection
help(selection)
??selection
library(sampleSelection)
help(selection)
